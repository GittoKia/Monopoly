/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package monopoly;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author kiaab
 */
public class Board extends javax.swing.JPanel {

    public void drawDie(int k, int l) {
        die[0] = k;
        die[1] = l;
        animate=true;
   }
    
    
   
    public boolean diceTime(){
        return time>7;}
    /**
     * Creates new form Board
     */
    Image img;
    Image die1;
    Image die2;
    Image die3;
    Image die4;
    Image die5;
    Image die6;
    int[] die = {1, 1};
    Timer t1;
    int time=0;
    boolean animate=false;

    public Board() {

        initComponents();
        t1 = new Timer(10, new Board.TimerListener());
        t1.start();
        //define images
        img = Toolkit.getDefaultToolkit().getImage("Monopoly.jpg");
        die1 = Toolkit.getDefaultToolkit().getImage("die1.png");
        die2 = Toolkit.getDefaultToolkit().getImage("die2.png");
        die3 = Toolkit.getDefaultToolkit().getImage("die3.png");
        die4 = Toolkit.getDefaultToolkit().getImage("die4.png");
        die5 = Toolkit.getDefaultToolkit().getImage("die5.png");
        die6 = Toolkit.getDefaultToolkit().getImage("die6.png");
        repaint();

    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        //upload images
        g.drawImage(img, 0, 0, this);
        //g.drawImage(img, 0, 0, 300, 400, this);
        if (animate && time<8) {
            time++;
            
            switch (time%5){
                case 0 ->{
                g.drawImage(die1, 120, 160, this);
                g.drawImage(die4, 200, 160, this);
                }
                case 1 ->{
                g.drawImage(die3, 120, 160, this);
                g.drawImage(die5, 200, 160, this);
                }
                case 2 ->{
                g.drawImage(die5, 120, 160, this);
                g.drawImage(die2, 200, 160, this);
                }
                case 3 ->{
                g.drawImage(die4, 120, 160, this);
                g.drawImage(die6, 200, 160, this);
                }
                case 4 ->{
                g.drawImage(die1, 120, 160, this);
                g.drawImage(die5, 200, 160, this);
                }
}
        } else {
            
            
            switch (die[0]) {
                case 1 ->
                    g.drawImage(die1, 120, 160, this);
                case 2 ->
                    g.drawImage(die2, 120, 160, this);
                case 3 ->
                    g.drawImage(die3, 120, 160, this);
                case 4 ->
                    g.drawImage(die4, 120, 160, this);
                case 5 ->
                    g.drawImage(die5, 120, 160, this);
                case 6 ->
                    g.drawImage(die6, 120, 160, this);
            }
            switch (die[1]) {
                case 1 ->
                    g.drawImage(die1, 200, 160, this);
                case 2 ->
                    g.drawImage(die2, 200, 160, this);
                case 3 ->
                    g.drawImage(die3, 200, 160, this);
                case 4 ->
                    g.drawImage(die4, 200, 160, this);
                case 5 ->
                    g.drawImage(die5, 200, 160, this);
                case 6 ->
                    g.drawImage(die6, 200, 160, this);
            }
            time=0;
            animate=false;
        }
    }

    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(960, 720));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 960, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

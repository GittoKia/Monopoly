package monopoly;

import javax.swing.JTextArea;
import javax.swing.JLabel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author kiaab
 */
public class MonopolyUI extends javax.swing.JFrame {

    /**
     * Creates new form MonopolyUI
     */
    public MonopolyUI() {
        initComponents();
        //begin game
        rollDice.setEnabled(true);
        endTurn.setEnabled(false);
        buy.setEnabled(false);
        EventText.setEditable(false);
        top_Hat1.setParentFrame(this);
        M1.setText(String.valueOf(money[0]));
        M2.setText(String.valueOf(money[1]));
        M3.setText(String.valueOf(money[2]));
        M4.setText(String.valueOf(money[3]));

    }

    // variables to check events
    public static int playerTurn = 0;
    public static int[] money = {1500, 1500, 1500, 1500};
    boolean toBuy = false;
    boolean two = false;
    String colorDisplay = "Red";
    String property = "";

    //placeholder variables
    int move = 0;
    int arbitraryPos = 0;
    int costs = 0;

    //variables to determine whether a turn should be skipped
    boolean[] frozen = {false, false, false, false};
    int[] fTurns = {0, 0, 0, 0};
    boolean[] alive = {true, true, true, true};

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        top_Hat1 = new monopoly.Top_Hat();
        board1 = new monopoly.Board();
        rollDice = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        endTurn = new javax.swing.JButton();
        buy = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        SellText = new javax.swing.JLabel();
        M3 = new javax.swing.JLabel();
        M4 = new javax.swing.JLabel();
        M1 = new javax.swing.JLabel();
        M2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Br2O = new javax.swing.JLabel();
        Br3O = new javax.swing.JLabel();
        P1O = new javax.swing.JLabel();
        P2O = new javax.swing.JLabel();
        P3O = new javax.swing.JLabel();
        Y1O = new javax.swing.JLabel();
        Y2O = new javax.swing.JLabel();
        Y3O = new javax.swing.JLabel();
        B1O = new javax.swing.JLabel();
        B3O = new javax.swing.JLabel();
        B2O = new javax.swing.JLabel();
        Br1O = new javax.swing.JLabel();
        Br1P = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        Br1R = new javax.swing.JLabel();
        Br2R = new javax.swing.JLabel();
        Br3R = new javax.swing.JLabel();
        P1R = new javax.swing.JLabel();
        P2R = new javax.swing.JLabel();
        P3R = new javax.swing.JLabel();
        Y1R = new javax.swing.JLabel();
        Y2R = new javax.swing.JLabel();
        Y3R = new javax.swing.JLabel();
        B1R = new javax.swing.JLabel();
        B2R = new javax.swing.JLabel();
        B3R = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        EventText = new javax.swing.JTextArea();

        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rollDice.setText("Roll");
        rollDice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollDiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout board1Layout = new javax.swing.GroupLayout(board1);
        board1.setLayout(board1Layout);
        board1Layout.setHorizontalGroup(
            board1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(board1Layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(rollDice)
                .addContainerGap(153, Short.MAX_VALUE))
        );
        board1Layout.setVerticalGroup(
            board1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, board1Layout.createSequentialGroup()
                .addContainerGap(235, Short.MAX_VALUE)
                .addComponent(rollDice)
                .addGap(99, 99, 99))
        );

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setText("Money");

        endTurn.setText("End Turn");
        endTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTurnActionPerformed(evt);
            }
        });

        buy.setText("Buy");
        buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyActionPerformed(evt);
            }
        });

        jLabel1.setText("Red");

        jLabel2.setText("Blue");

        jLabel4.setText("Yellow");

        jLabel3.setText("Green");

        jLabel10.setText("Zen Park");

        jLabel11.setText("Boney Island");

        jLabel12.setText("Zombopolis");

        jLabel13.setText("Sandy Sands");

        jLabel14.setText("Z-Tech Factory");

        jLabel15.setText("Time Park");

        jLabel16.setText("Frosty Creek");

        jLabel17.setText("Suburbia");

        jLabel18.setText("Colizeum");

        jLabel19.setText("Aqua Center");

        jLabel20.setText("Frontline Flats");

        jLabel21.setText("Zomboss Estate");

        jLabel9.setText("Property");

        javax.swing.GroupLayout top_Hat1Layout = new javax.swing.GroupLayout(top_Hat1);
        top_Hat1.setLayout(top_Hat1Layout);
        top_Hat1Layout.setHorizontalGroup(
            top_Hat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(top_Hat1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(top_Hat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(top_Hat1Layout.createSequentialGroup()
                        .addGap(0, 451, Short.MAX_VALUE)
                        .addGroup(top_Hat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(top_Hat1Layout.createSequentialGroup()
                        .addComponent(board1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(top_Hat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(30, 30, 30))
            .addGroup(top_Hat1Layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(jLabel1)
                .addGap(53, 53, 53)
                .addComponent(jLabel2)
                .addGap(48, 48, 48)
                .addComponent(jLabel3)
                .addGap(37, 37, 37)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(top_Hat1Layout.createSequentialGroup()
                .addComponent(endTurn)
                .addGap(139, 139, 139)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buy)
                .addGap(70, 70, 70))
        );
        top_Hat1Layout.setVerticalGroup(
            top_Hat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(top_Hat1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(21, 21, 21)
                .addGroup(top_Hat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(top_Hat1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel20)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12))
                    .addComponent(board1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(top_Hat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endTurn)
                    .addComponent(buy)
                    .addComponent(jLabel5))
                .addGap(15, 15, 15)
                .addGroup(top_Hat1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)))
        );

        M3.setText("1500");

        M4.setText("1500");

        M1.setText("1500");

        M2.setText("1500");

        jLabel6.setText("Price");

        jLabel8.setText("Owner");

        Br2O.setText(" N/A  ");

        Br3O.setText(" N/A  ");

        P1O.setText(" N/A  ");

        P2O.setText(" N/A  ");

        P3O.setText(" N/A  ");

        Y1O.setText(" N/A  ");

        Y2O.setText(" N/A  ");

        Y3O.setText(" N/A  ");

        B1O.setText(" N/A  ");

        B3O.setText(" N/A  ");

        B2O.setText(" N/A  ");

        Br1O.setText(" N/A  ");

        Br1P.setText("60");

        jLabel35.setText("70");

        jLabel36.setText("310");

        jLabel37.setText("150");

        jLabel38.setText("280");

        jLabel39.setText("250");

        jLabel40.setText("190");

        jLabel41.setText("170");

        jLabel42.setText("80");

        jLabel43.setText("460");

        jLabel44.setText("420");

        jLabel45.setText("380");

        jLabel46.setText("Rent");

        Br1R.setText("  0 ");

        Br2R.setText("  0 ");

        Br3R.setText("  0 ");

        P1R.setText("  0 ");

        P2R.setText("  0 ");

        P3R.setText("  0 ");

        Y1R.setText("  0 ");

        Y2R.setText("  0 ");

        Y3R.setText("  0 ");

        B1R.setText("  0 ");

        B2R.setText("  0 ");

        B3R.setText("  0 ");

        EventText.setEditable(false);
        EventText.setColumns(20);
        EventText.setRows(5);
        EventText.setFocusable(false);
        jScrollPane1.setViewportView(EventText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(top_Hat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(SellText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addComponent(M1)
                                .addGap(48, 48, 48)
                                .addComponent(M2)
                                .addGap(46, 46, 46)
                                .addComponent(M3)
                                .addGap(47, 47, 47)
                                .addComponent(M4)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(56, 56, 56)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(Br1P)
                                .addComponent(jLabel35)
                                .addComponent(jLabel42)
                                .addComponent(jLabel37)
                                .addComponent(jLabel41)
                                .addComponent(jLabel40)
                                .addComponent(jLabel39)
                                .addComponent(jLabel38)
                                .addComponent(jLabel36)
                                .addComponent(jLabel45)
                                .addComponent(jLabel44)
                                .addComponent(jLabel43)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(P1R)
                                .addComponent(Br3R)
                                .addComponent(Br2R)
                                .addComponent(Br1R)
                                .addComponent(P2R)
                                .addComponent(P3R)
                                .addComponent(Y1R)
                                .addComponent(Y2R)
                                .addComponent(Y3R)
                                .addComponent(B3R)
                                .addComponent(B2R)
                                .addComponent(B1R))
                            .addComponent(jLabel46))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(Br2O)
                            .addComponent(B3O)
                            .addComponent(B2O)
                            .addComponent(B1O)
                            .addComponent(Y3O)
                            .addComponent(Y2O)
                            .addComponent(Y1O)
                            .addComponent(P3O)
                            .addComponent(P2O)
                            .addComponent(P1O)
                            .addComponent(Br3O)
                            .addComponent(Br1O)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(top_Hat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(M4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(M1)
                                .addComponent(M2)
                                .addComponent(M3)))
                        .addGap(100, 100, 100)
                        .addComponent(SellText, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel46)
                                .addGap(27, 27, 27)
                                .addComponent(Br1R)
                                .addGap(15, 15, 15)
                                .addComponent(Br2R)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Br1O)
                                        .addGap(18, 18, 18)
                                        .addComponent(Br2O)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Br3O)
                                            .addComponent(Br3R))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(P1O)
                                            .addComponent(P1R))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(P2O)
                                            .addComponent(P2R))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(P3O)
                                            .addComponent(P3R))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Y1O)
                                            .addComponent(Y1R))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Y2O)
                                            .addComponent(Y2R))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Y3O)
                                            .addComponent(Y3R)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Br1P)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel35)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel42)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel37)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel41)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel40)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel39)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel38)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel36)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(B1O)
                                    .addComponent(jLabel45)
                                    .addComponent(B1R))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(B2O)
                                    .addComponent(jLabel44)
                                    .addComponent(B2R))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(B3O)
                                    .addComponent(jLabel43)
                                    .addComponent(B3R))
                                .addGap(47, 47, 47)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rollDiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollDiceActionPerformed

        //roll die
        int n1 = (int) (Math.random() * 6 + 1);
        int n2 = (int) (Math.random() * 6 + 1);

        //animate dice roll
        for (int i = 0; i < 8; i++) {
            move = diceRoll(n1, n2);
        }
        top_Hat1.movePlayer(move, playerTurn);
    }//GEN-LAST:event_rollDiceActionPerformed

    private void endTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTurnActionPerformed

        //start new turn
        if (endTurn.getText().equals("End Turn")) {
            playerTurn++;
            playerTurn %= 4;
            //correspond message to the turn
            switch (playerTurn) {
                case 0 ->
                    colorDisplay = "Red";
                case 1 ->
                    colorDisplay = "Blue";
                case 2 ->
                    colorDisplay = "Green";
                case 3 ->
                    colorDisplay = "Yellow";
            }

            //determine winner
            switch (winner()) {

                case 0 -> {
                    EventText.setText("Red wins the game!");
                    rollDice.setEnabled(false);
                    endTurn.setEnabled(false);
                    buy.setEnabled(false);
                }
                case 1 -> {
                    EventText.setText("Blue wins the game!");
                    rollDice.setEnabled(false);
                    endTurn.setEnabled(false);
                    buy.setEnabled(false);
                }
                case 2 -> {
                    EventText.setText("Green wins the game!");
                    rollDice.setEnabled(false);
                    endTurn.setEnabled(false);
                    buy.setEnabled(false);
                }
                case 3 -> {
                    EventText.setText("Yellow wins the game!");
                    rollDice.setEnabled(false);
                    endTurn.setEnabled(false);
                    buy.setEnabled(false);
                }

                //continue game
                case 4 -> {

                    //player is frozen
                    if (frozen[playerTurn] && fTurns[playerTurn] < 3) {
                        top_Hat1.movePlayer(0, playerTurn);
                        if (3 - fTurns[playerTurn] != 1) {
                            EventText.setText(colorDisplay + ", you are frozen for " + (3 - fTurns[playerTurn]) + " turns.");
                        } else {
                            EventText.setText(colorDisplay + ", you are frozen for 1 turn.");
                        }

                        fTurns[playerTurn]++;

                        //player was bankrupted
                    } else if (alive[playerTurn] == false) {
                        EventText.setText(colorDisplay + ", you are frozen forever!");

                    } else {

                        //next turn
                        fTurns[playerTurn] = 0;
                        frozen[playerTurn] = false;
                        rollDice.setEnabled(true);
                        endTurn.setEnabled(false);
                        buy.setEnabled(false);
                        EventText.setText(colorDisplay + ", it's your turn.");
                    }
                }

            }
        } //seleced not to buy
        else {
            buy.setEnabled(false);
            endTurn.setText("End Turn");
            //had double
            if (two) {
                rollDice.setEnabled(true);
                endTurn.setEnabled(false);
                EventText.setText("It's " + colorDisplay + "'s turn again!");
            } else {

            }
        }
    }//GEN-LAST:event_endTurnActionPerformed

    private void buyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyActionPerformed

        //deduct money from buying
        toBuy = true;
        buy(costs, arbitraryPos);
        arbitraryPos = 0;
    }//GEN-LAST:event_buyActionPerformed

    /**
     * Start the dice animation
     *
     * @param num1 integer corresponding to the first dice
     * @param num2 integer corresponding to the second dice
     *
     * @return the amount to move the player for
     */
    public int diceRoll(int num1, int num2) {

        board1.drawDie(num1, num2);
        //double
        if (num1 == num2) {
            two = true;
            rollDice.setEnabled(true);
            endTurn.setEnabled(false);
            EventText.setText("It's " + colorDisplay + "'s turn again!");
            //no double
        } else {
            two = false;
            rollDice.setEnabled(false);
            endTurn.setEnabled(true);
            EventText.setText(colorDisplay + "'s turn is over!");
        }
        return num1 + num2;
    }

    //define text box 
    public JTextArea defineTextFrame() {
        return EventText;
    }

    /**
     * Buy property
     *
     * @param cost how much to deduct from the player's bank
     * @param position integer representing property bought
     *
     */
    public void buy(int cost, int position) {

        //can buy
        switch (position) {
            case 1 ->
                property = "Zen Peak";
            case 3 ->
                property = "Boney Island";
            case 4 ->
                property = "Sandy Sands";
            case 6 ->
                property = "Z-Tech Factory";
            case 8 ->
                property = "Time Park";
            case 9 ->
                property = "Frosty Creek";
            case 11 ->
                property = "Suburbia";
            case 12 ->
                property = "Aqua Center";
            case 14 ->
                property = "Colizeum";
            case 16 ->
                property = "Frontline Flats";
            case 17 ->
                property = "Zombopolis";
            case 19 ->
                property = "Zomboss Estate";
        }
        EventText.setText("Buy " + property + " for " + String.valueOf(cost) + "?");
        costs = cost;
        rollDice.setEnabled(false);
        endTurn.setText("Don't buy");
        endTurn.setEnabled(true);
        buy.setEnabled(true);
        if (toBuy) {

            //update money amounts
            if (alive[playerTurn]) {
                top_Hat1.owned[position] = playerTurn;
                money[playerTurn] -= cost;
                endTurn.setText("End Turn");
                updateMoney();
                toBuy = false;

                //double after
                if (two) {
                    rollDice.setEnabled(true);
                    endTurn.setEnabled(false);
                    buy.setEnabled(false);
                    endTurn.setText("End Turn");
                    EventText.setText("It's " + colorDisplay + "'s turn again!");

                    //no double after
                } else {
                    rollDice.setEnabled(false);
                    endTurn.setEnabled(true);
                    buy.setEnabled(false);
                    if (frozen[playerTurn] == true) {
                        EventText.setText(colorDisplay + " is now in Jail.\nThey are frozen for \n3 turns thereafter.");
                    } else {
                        EventText.setText(colorDisplay + "'s turn is over!");
                    }
                }
            }

            //unable to afford property
        } else if (money[playerTurn] < cost) {
            buy.setEnabled(false);
            EventText.setText("You can't afford it!");
        }
        updateStatus(top_Hat1.owned);
    }

    /**
     * A player pays another player rent
     *
     * @param rent Amount to pay
     * @param player player that will receive money
     *
     */
    public void payRent(int rent, int player) {
        if (playerTurn != player) {

            //deduct+add money
            money[playerTurn] -= rent;
            money[player] += rent;

            //show payment on UI
            updateMoney();
            switch (player) {
                case 0 ->
                    EventText.setText(EventText.getText() + "\n" + colorDisplay + " paid " + rent + " to Red.");
                case 1 ->
                    EventText.setText(EventText.getText() + "\n" + colorDisplay + " paid " + rent + " to Blue.");
                case 2 ->
                    EventText.setText(EventText.getText() + "\n" + colorDisplay + " paid " + rent + " to Green.");
                case 3 ->
                    EventText.setText(EventText.getText() + "\n" + colorDisplay + " paid " + rent + " to Yellow.");
            }
            //can't pay
            if (money[playerTurn] < 0) {
                alive[playerTurn] = false;
                declare(playerTurn);
            }
        }
    }

    /**
     * Carries out bank transactions
     *
     * @param cash money involved in the transaction
     * @param getMoney whether money is received or paid
     *
     */
    public void bank(int cash, boolean getMoney) {

        //banks pays player
        if (getMoney) {
            money[playerTurn] += cash;
            EventText.setText("You recieved " + cash + " from the bank.");
        } //player pays bank
        else {
            money[playerTurn] -= cash;
            EventText.setText("You paid " + cash + " to the bank.");
            if (money[playerTurn] < cash) {
                alive[playerTurn] = false;
                declare(playerTurn);
            }
        }
        updateMoney();
    }

    /**
     * Determines who won
     *
     * @return an integer representing the player that won
     */
    public int winner() {

        //red wins
        if (alive[1] == false && alive[2] == false && alive[3] == false) {
            return 0;
        }

        //blue wins
        if (alive[0] == false && alive[2] == false && alive[3] == false) {
            return 1;
        }

        //green wins
        if (alive[0] == false && alive[1] == false && alive[3] == false) {
            return 2;
        }

        //yellow wins
        if (alive[1] == false && alive[2] == false && alive[0] == false) {
            return 3;
        } //no winner
        else {
            return 4;
        }
    }

    /**
     * Disables a double in certain scenarios
     *
     */
    public void disableDouble() {
        two = false;
        rollDice.setEnabled(false);
        endTurn.setEnabled(true);
        if (frozen[playerTurn] == true) {
            EventText.setText(colorDisplay + " is now in Jail.\nThey are frozen for \n3 turns thereafter.");
        } else {
            EventText.setText(colorDisplay + "'s turn is over!");
        }
    }

    /**
     * Transfer properties to the bank
     *
     * @param p player who is bankrupted
     *
     */
    public void declare(int p) {
        disableDouble();
        money[playerTurn] = 0;
        updateMoney();
        EventText.setText(colorDisplay + " is now Bankrupt \n" + colorDisplay + "'s properties will be transfered to the bank");
        for (int i = 0; i < 20; i++) {
            if (top_Hat1.owned[i] == p) {
                top_Hat1.owned[i] = 4;
            }

        }
    }

    /**
     * Updates the money values in the UI
     *
     */
    public void updateMoney() {
        JLabel[] j = {M1, M2, M3, M4};
        for (int a = 0; a < 4; a++) {
            j[a].setText(String.valueOf(money[a]));
        }
    }

    /**
     * Updates rent values
     *
     * @param r an array of rent values used to update
     *
     */
    public void updateRent(int[] r) {
        JLabel[] rentValues = {Br1R, Br2R, Br3R, P1R, P2R, P3R, Y1R, Y2R, Y3R, B1R, B2R, B3R};
        int i = 0;
        for (int a = 0; a < 20; a++) {
            if (r[a] > 0 && i < 12) {
                rentValues[i].setText(String.valueOf(r[a]));
                i++;
            }
        }
    }

    /**
     * Update the properties owned on the UI
     *
     * @param o an array of owner values used to update
     *
     */
    public void updateStatus(int[] o) {
        JLabel[] l = {Br1O, Br2O, Br3O, P1O, P2O, P3O, Y1O, Y2O, Y3O, B1O, B2O, B3O};
        int i = 0;
        for (int a = 0; a < 20; a++) {

            switch (o[a]) {
                case 0 -> {

                    l[i].setText("Red");
                    i++;
                }
                case 1 -> {

                    l[i].setText("Blue");
                    i++;
                }
                case 2 -> {

                    l[i].setText("Green");
                    i++;
                }
                case 3 -> {

                    l[i].setText("Yellow");
                    i++;
                }
                case 4 -> {
                    l[i].setText("  N/A  ");
                    i++;
                }
            }

        }
    }

    /**
     * Updates display if go is passed
     *
     * @param player the player who passed go
     *
     */
    public void go(int player) {

        //add money for going around board
        money[player] += 200;
        EventText.setText(EventText.getText() + "\nPassed GO, Collect 200");
        updateMoney();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonopolyUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonopolyUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonopolyUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonopolyUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MonopolyUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel B1O;
    private javax.swing.JLabel B1R;
    private javax.swing.JLabel B2O;
    private javax.swing.JLabel B2R;
    private javax.swing.JLabel B3O;
    private javax.swing.JLabel B3R;
    private javax.swing.JLabel Br1O;
    private javax.swing.JLabel Br1P;
    private javax.swing.JLabel Br1R;
    private javax.swing.JLabel Br2O;
    private javax.swing.JLabel Br2R;
    private javax.swing.JLabel Br3O;
    private javax.swing.JLabel Br3R;
    private javax.swing.JTextArea EventText;
    private javax.swing.JLabel M1;
    private javax.swing.JLabel M2;
    private javax.swing.JLabel M3;
    private javax.swing.JLabel M4;
    private javax.swing.JLabel P1O;
    private javax.swing.JLabel P1R;
    private javax.swing.JLabel P2O;
    private javax.swing.JLabel P2R;
    private javax.swing.JLabel P3O;
    private javax.swing.JLabel P3R;
    private javax.swing.JLabel SellText;
    private javax.swing.JLabel Y1O;
    private javax.swing.JLabel Y1R;
    private javax.swing.JLabel Y2O;
    private javax.swing.JLabel Y2R;
    private javax.swing.JLabel Y3O;
    private javax.swing.JLabel Y3R;
    private monopoly.Board board1;
    private javax.swing.JButton buy;
    private javax.swing.JButton endTurn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton rollDice;
    private monopoly.Top_Hat top_Hat1;
    // End of variables declaration//GEN-END:variables
}
